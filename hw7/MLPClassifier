# Import necessary libraries

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('path_to_your_dataset.csv')

# Remove non-relevant features
X = data.drop(['Neo Reference ID', 'Name', 'Hazardous'], axis=1)
y = data['Hazardous']

# Split the dataset into training and test se
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Standardize the numeric features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create and train the MLPClassifier model
model = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=500, random_state=42)
model.fit(X_train_scaled, y_train)

# Predict on the test set
y_pred = model.predict(X_test_scaled)

# Calculate overall classification accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Overall Classification Accuracy:", accuracy)

# Generate confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Plotting training/test accuracy
plt.plot(model.loss_curve_)
plt.title('Training/Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.show()
